const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();

// Body parser middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/blogDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('MongoDB Connected'))
.catch(err => console.log(err));

// Define schema and model
const postSchema = new mongoose.Schema({
    title: String,
    content: String
});

const Post = mongoose.model('Post', postSchema);

// Serve static files
app.use(express.static('public'));

// Get all posts
app.get('/posts', (req, res) => {
    Post.find({}, (err, foundPosts) => {
        if (err) {
            console.log(err);
            res.status(500).send('Error retrieving posts');
        } else {
            res.json(foundPosts);
        }
    });
});

// Compose a new post
app.get('/compose', (req, res) => {
    res.sendFile(__dirname + '/compose.html');
});

app.post('/compose', (req, res) => {
    const { title, content } = req.body;
    const newPost = new Post({ title, content });
    newPost.save(err => {
        if (err) {
            console.log(err);
            res.status(500).send('Error saving post');
        } else {
            res.redirect('/');
        }
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
